---
import "@/styles/globals.css";
import "@/styles/theme.css";
import TheFooter from "./_/the-footer.astro";
import TheHeader from "./_/the-header.astro";
import TheHero from "./_/the-hero.astro";
import { cn } from "@/lib/utils";
import TheOtherKnowledges from "./_/the-other-knowledges.astro";
import TheNewsletter from "./_/the-newsletter.astro";
import PostsItem from "@/components/posts-item.astro";
import TheContact from "./_/the-contact.astro";
import { ClientRouter } from "astro:transitions";
import { Toaster } from "@/components/ui/sonner";
import { getLayout } from "@/lib/api";
import LoadingIndicator from "astro-loading-indicator/component";

// DATA ************************************************************************************************************************************
const { config, hero, isHome, isMain, organizationPost, otherKnowledges, theme } = await getLayout(
  Astro.params.knowledge ?? "traditions-ancestrales",
  Astro.routePattern === "/[...knowledge]",
  { pocketbase: Astro.locals.pocketbase, cache: import.meta.env.DEV ? "1d" : undefined }
);

// CACHE ***********************************************************************************************************************************
export const layoutCache = ["config", "knowledges", "posts_l-association"];
---

<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Traditions ancestrales</title>
    <ClientRouter />
    <LoadingIndicator color="rgb(var(--primary))" height="4px" />
  </head>
  <body class="group overflow-y-auto overflow-x-hidden" data-theme={theme}>
    <RootElement><div data-target="scroll"></div></RootElement>
    <TheHeader class="fixed left-0 top-0 z-30 w-full" />
    <TheHero {...hero} class={cn(isMain ? "h-screen" : "h-[50vh]")} />
    <slot />
    {isHome && <PostsItem post={organizationPost} border="bottom" intent="primary" />}
    <TheOtherKnowledges knowledges={otherKnowledges} />
    <TheNewsletter border="top" intent="primary" />
    {isHome ? <TheContact intent="light" /> : <PostsItem post={organizationPost} class="mb-4" />}
    <TheFooter {config} />
    <Toaster client:load richColors theme="light" />
  </body>
</html>

<script>
  RootElement.ready(($) => {
    const observer = new IntersectionObserver(([entry]) => (document.body.dataset.scrolled = `${entry.boundingClientRect.y < 0}`));
    observer.observe($("scroll"));
    return () => observer.disconnect();
  });
</script>
